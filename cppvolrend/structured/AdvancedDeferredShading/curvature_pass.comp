//curvature_pass.comp
#version 430

// 输入G-Buffer纹理
layout(binding = 0) uniform sampler2D gPosition;
layout(binding = 1) uniform sampler2D gNormal;

// 输出图像
layout(r32f, binding = 2) uniform image2D gCurvatureMax;  // κ1
layout(r32f, binding = 3) uniform image2D gCurvatureMin;  // κ2
layout(rg32f, binding = 4) uniform image2D gCurvatureDir; // 主曲率方向

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;
uniform mat4 ProjectionMatrix;


// 计算形状算子函数
mat3 computeShapeOperator(vec3 position, vec3 normal, ivec2 coord) {
    // 1. 计算局部坐标系（切向量）
    vec3 tangent1 = vec3(0.0);
    vec3 tangent2 = vec3(0.0);

    if (abs(normal.x) < abs(normal.y)) {
        tangent1 = normalize(cross(vec3(1.0, 0.0, 0.0), normal));
    } else {
        tangent1 = normalize(cross(vec3(0.0, 1.0, 0.0), normal));
    }
    tangent2 = normalize(cross(normal, tangent1));

    // 2. 获取屏幕空间的 texel 大小
    vec2 texelSize = 1.0 / vec2(textureSize(gNormal, 0)); // 屏幕空间每像素偏移量

    // 3. 采样相邻像素的法线
    vec2 uv = (vec2(coord) + 0.5) * texelSize; // 当前像素的中心纹理坐标

    vec3 nRight  = normalize(texture(gNormal, uv + vec2(texelSize.x, 0.0)).xyz);
    vec3 nLeft   = normalize(texture(gNormal, uv - vec2(texelSize.x, 0.0)).xyz);
    vec3 nTop    = normalize(texture(gNormal, uv + vec2(0.0, texelSize.y)).xyz);
    vec3 nBottom = normalize(texture(gNormal, uv - vec2(0.0, texelSize.y)).xyz);

    // 4. 计算法线的偏导数
    vec3 dNdx = (nRight - nLeft) / (2.0 * texelSize.x);
    vec3 dNdy = (nTop - nBottom) / (2.0 * texelSize.y);

    // 5. 构建切空间的投影矩阵
    mat3 P = mat3(
        1.0 - normal.x * normal.x, -normal.x * normal.y, -normal.x * normal.z,
        -normal.y * normal.x, 1.0 - normal.y * normal.y, -normal.y * normal.z,
        -normal.z * normal.x, -normal.z * normal.y, 1.0 - normal.z * normal.z
    );

    // 6. 计算形状算子矩阵 S = -dN/dx * P
    mat3 dN = mat3(
        dNdx.x, dNdy.x, 0.0,
        dNdx.y, dNdy.y, 0.0,
        dNdx.z, dNdy.z, 0.0
    );

    return -dN * P;
}

// 计算主曲率
void computePrincipalCurvatures(mat3 shapeOperator, vec3 normal, 
                               out float k1, out float k2, out vec3 dir1,out float debugDet,out float debugTrace) {
    // 构建切空间中的2x2矩阵
    vec3 tangent1, tangent2;
    if (abs(normal.x) < abs(normal.y)) {
        tangent1 = normalize(cross(vec3(1.0, 0.0, 0.0), normal));
    } else {
        tangent1 = normalize(cross(vec3(0.0, 1.0, 0.0), normal));
    }
    tangent2 = normalize(cross(normal, tangent1));
    
    // 提取2x2矩阵
    mat2 A;
    A[0][0] = dot(tangent1, shapeOperator * tangent1);
    A[0][1] = dot(tangent1, shapeOperator * tangent2);
    A[1][0] = dot(tangent2, shapeOperator * tangent1);
    A[1][1] = dot(tangent2, shapeOperator * tangent2);
    
    // 计算特征值（主曲率）
    float trace = A[0][0] + A[1][1];
    float det = A[0][0] * A[1][1] - A[0][1] * A[1][0];
    float discriminant = sqrt(trace * trace / 4.0 - det);
    
    
    debugDet = det;
    debugTrace = trace;
    
    k1 = trace / 2.0 + discriminant;
    k2 = trace / 2.0 - discriminant;
    
    // 计算最大主曲率方向
    float theta = atan(A[0][1], k1 - A[0][0]);
    dir1 = cos(theta) * tangent1 + sin(theta) * tangent2;
}

void main() {
    ivec2 coord = ivec2(gl_GlobalInvocationID.xy);
    ivec2 size = imageSize(gCurvatureMax);
    
    if (coord.x >= size.x || coord.y >= size.y) {
        return;
    }
    
    vec2 texCoord = vec2(coord) / vec2(size);
    
    // 获取位置和法线
    vec3 position = texture(gPosition, texCoord).xyz;
    vec3 normal = normalize(texture(gNormal, texCoord).xyz);
    
    //if (length(normal) < 0.1) {
    if (length(texture(gNormal, texCoord).xyz) < 0.1) {
    // 跳过背景像素
        imageStore(gCurvatureMax, coord, vec4(0.0));
        imageStore(gCurvatureMin, coord, vec4(0.0));
        imageStore(gCurvatureDir, coord, vec4(0.0));
        return;
    }
    
    // 计算形状算子
    mat3 shapeOperator = computeShapeOperator(position, normal, coord);
    float debugDet,debugTrace;
    // 计算主曲率和方向
    float k1, k2;
    vec3 maxCurvDir;
    computePrincipalCurvatures(shapeOperator, normal, k1, k2, maxCurvDir,debugDet,debugTrace);
    
    // 存储结果
    imageStore(gCurvatureMax, coord, vec4(k1));
    imageStore(gCurvatureMin, coord, vec4(k2));
    
    // 存储主曲率方向（投影到图像平面）
    vec4 clipSpace = ProjectionMatrix * vec4(maxCurvDir, 0.0);
    vec2 screenDir = normalize(clipSpace.xy);
    imageStore(gCurvatureDir, coord, vec4(screenDir, 0.0, 0.0));
}