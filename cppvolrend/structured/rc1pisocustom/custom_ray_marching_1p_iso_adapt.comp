#version 430

layout (binding = 1) uniform sampler3D TexVolume; 
layout (binding = 2) uniform sampler3D TexVolumeGradient;
layout(binding = 3) uniform sampler3D TexBlockMin;
layout(binding = 4) uniform sampler3D TexBlockMax;
uniform vec3 VolumeGridResolution;
uniform vec3 VolumeVoxelSize;
uniform vec3 VolumeGridSize;
uniform vec3 numBlocks;

uniform vec3 CameraEye;

uniform mat4 u_CameraLookAt;
uniform mat4 ProjectionMatrix;

uniform float u_TanCameraFovY;
uniform float u_CameraAspectRatio;

uniform float Isovalue;
uniform float StepSizeSmall;
uniform float StepSizeLarge;
uniform float StepSizeRange;
uniform vec4 Color;

uniform int ApplyGradientPhongShading;

uniform vec3 VolumeScales;

uniform float BlinnPhongKa;
uniform float BlinnPhongKd;
uniform float BlinnPhongKs;
uniform float BlinnPhongShininess;

uniform vec3 BlinnPhongIspecular;

uniform vec3 WorldEyePos;
uniform vec3 LightSourcePosition;

layout (local_size_x = 8, local_size_y = 8, local_size_z = 1) in;
layout (rgba16f, binding = 0) uniform image2D OutputFrag;

//////////////////////////////////////////////////////////////////////////////////////////////////
// From structured/_common_shaders/ray_bbox_intersection.comp
struct Ray { vec3 Origin; vec3 Dir; };
bool RayAABBIntersection (vec3 vert_eye, vec3 vert_dir, vec3 vol_scaled_dim,
                          out Ray r, out float rtnear, out float rtfar);
//////////////////////////////////////////////////////////////////////////////////////////////////

vec3 ShadeBlinnPhong (vec3 Tpos, vec3 clr)
{
  // Gradient normal
  vec3 gradient_normal =  texture(TexVolumeGradient, Tpos / VolumeGridSize).xyz;
  
  // If is non-zero
  if (gradient_normal != vec3(0, 0, 0))
  {
    vec3 Wpos = Tpos - (VolumeGridSize * 0.5);
    
    vec3 light_direction = normalize(LightSourcePosition - Wpos);
    vec3 eye_direction   = normalize(CameraEye - Wpos);
    vec3 halfway_vector  = normalize(eye_direction + light_direction);
  
    gradient_normal      = normalize(gradient_normal);
    // We consider front and back faces as the same
    // float FrontOrBack = dot(gradient_normal, eye_direction);
    // float FrontOrBack = dot(gradient_normal, light_direction);
    // if (FrontOrBack < 0)
    // {
    //   gradient_normal = -gradient_normal;
    // }
    
    // float dot_diff = dot(gradient_normal, light_direction);
    // if (dot_diff < 0) dot_diff = dot(-gradient_normal, light_direction);
    float dot_diff = max(0, dot(gradient_normal, light_direction));

    // float dot_spec = dot(halfway_vector, gradient_normal);
    // if (dot_spec < 0) dot_spec = dot(halfway_vector, -gradient_normal);
    float dot_spec = max(0, dot(halfway_vector, gradient_normal));
   
    clr = 
      // rgb only affects ambient + diffuse
      (clr * (BlinnPhongKa + BlinnPhongKd * dot_diff)) 
      // specular contribution has it's own color
      + BlinnPhongIspecular * BlinnPhongKs * pow(dot_spec, BlinnPhongShininess)
    ;
  }

  return clr;
}

// Get block index from world position
ivec3 getBlockIndex(vec3 pos) {
    vec3 normalizedPos = (pos + (VolumeGridSize * 0.5)) / VolumeGridSize;
    return ivec3(floor(normalizedPos * numBlocks));
}

// Get block boundaries in world space
void getBlockBounds(ivec3 blockIdx, out vec3 blockMin, out vec3 blockMax) {
    vec3 blockSize = VolumeGridSize / numBlocks;
    blockMin = -VolumeGridSize * 0.5 + blockSize * vec3(blockIdx);
    blockMax = blockMin + blockSize;
}
float calculateNextBlockIntersection(vec3 rayOrigin, vec3 rayDir, ivec3 currentBlock, out ivec3 nextBlock) {
    if(abs(rayDir.x)<0.01||abs(rayDir.y)<0.01||abs(rayDir.z)<0.01)
    {
        return -1;
    }
    vec3 blockMin, blockMax;
    getBlockBounds(currentBlock, blockMin, blockMax);

    // Calculate distances to block boundaries
    vec3 t1 = (blockMin - rayOrigin) / rayDir;
    vec3 t2 = (blockMax - rayOrigin) / rayDir;
    
    // Find the maximum of entry points and minimum of exit points
    vec3 tMin = min(t1, t2);
    vec3 tMax = max(t1, t2);
    
    // Find the exit point
    float exitT = min(min(tMax.x, tMax.y), tMax.z);
    float inT = max(max(tMin.x,tMin.y),tMin.z);
    // Determine which face we're exiting from to calculate the next block
    nextBlock = currentBlock;
    if(exitT == tMax.x) nextBlock.x += int(sign(rayDir.x));
    if(exitT == tMax.y) nextBlock.y += int(sign(rayDir.y));
    if(exitT == tMax.z) nextBlock.z += int(sign(rayDir.z));
    
    return exitT-inT;
}

void main ()
{
  ivec2 storePos = ivec2(gl_GlobalInvocationID.xy);
  
  ivec2 size = imageSize(OutputFrag);
  if (storePos.x < size.x && storePos.y < size.y)
  {
    // Get screen position [x, y] and consider centering the pixel by + 0.5
    vec2 fpos = vec2(storePos) + 0.5;

    // Transform fpos from [w, h] to [0, 1] to [-1, 1]
    vec3 VerPos = (vec3(fpos.x / float(size.x), fpos.y / float(size.y), 0.0) * 2.0) - 1.0;

    // Camera direction
    vec3 camera_dir = normalize(vec3(VerPos.x * u_TanCameraFovY * u_CameraAspectRatio, VerPos.y * u_TanCameraFovY, -1.0) * mat3(u_CameraLookAt));

    // Find Ray Intersection
    Ray r; float tnear, tfar;
    bool inbox = RayAABBIntersection(CameraEye, camera_dir, VolumeGridSize, r, tnear, tfar);


    if (inbox)
    {
        float t = tnear;
        vec4 dst = vec4(0.0);
        vec3 prevTexPos = r.Origin + r.Dir * t + (VolumeGridSize * 0.5);    // If inside volume grid
        float prevDensity = texture(TexVolume, prevTexPos / VolumeGridSize).r;
        float CurrentStepSize;
        float density;
        while(t<tfar)
        {
            ivec3 blockIndex = getBlockIndex(r.Origin+t*r.Dir);
            vec3 blockCoord = (vec3(blockIndex) + 0.5) / numBlocks;
            float blockMin = texture(TexBlockMin, blockCoord).r;
            float blockMax = texture(TexBlockMax, blockCoord).r;
            
            //skip next block
            bool tilted = false;
            if(Isovalue < blockMin || Isovalue > blockMax)
            //if(false)
            {
                
                ivec3 nextBlock;
                float deltaT = calculateNextBlockIntersection(r.Origin+t*r.Dir, r.Dir, blockIndex, nextBlock);
                if(deltaT==-1)
                    tilted = true;
                /*
                if(deltaT==-1)
                {
                    dst=vec4(0.0,1.0,1.0,1.0);
                    break;
                }                
                if(deltaT<0)
                {
                    dst=vec4(0.0,0.0,1.0,1.0);
                    break;
                }
                if(deltaT<=0)
                {
                    dst=vec4(0.0,1.0,0,1.0);
                    break;
                }
                if(deltaT<=StepSizeSmall)
                {
                    dst=vec4(1.0,0,0,1.0);
                    break;
                }*/
                if(deltaT<=StepSizeSmall)
                {
                    deltaT = StepSizeSmall;
                }                

                t += deltaT;
                if(!tilted)
                    continue;
            }
            if((Isovalue >= blockMin && Isovalue <= blockMax)||tilted)
            {
                // Texture position
                prevTexPos = r.Origin + r.Dir * t + (VolumeGridSize * 0.5);
                CurrentStepSize = (abs(prevDensity - Isovalue) < StepSizeRange) ? StepSizeSmall : StepSizeLarge;
                prevDensity = texture(TexVolume, prevTexPos / VolumeGridSize).r;
                float h = min(CurrentStepSize, tfar - t);
                t +=h;
                vec3 texPos = r.Origin + r.Dir * t + (VolumeGridSize * 0.5);
                density = texture(TexVolume, texPos / VolumeGridSize).r;
                
                // First hit: isosurface
                
                if ( (prevDensity <= Isovalue && Isovalue < density)
                || (prevDensity >= Isovalue && Isovalue > density) )
                {
                    //refine position
                    float tt = (density - Isovalue) / (density - prevDensity);
                    t-=tt;
                    vec3 s_tex_pos = r.Origin + r.Dir * t + (VolumeGridSize * 0.5);
                    
                    // Get color
                    vec4 src = Color;

                    // Apply gradient, if enabled
                    if (ApplyGradientPhongShading == 1)
                    {
                        src.rgb = ShadeBlinnPhong(s_tex_pos, src.rgb);
                    }

                    // Front-to-back composition
                    src.rgb = src.rgb * src.a;
                    dst = dst + (1.0 - dst.a) * src;
                    
                    // Opacity threshold: 99%
                    if (dst.a > 0.99) break;

                }
            }
            
            /*
            // Texture position
            prevTexPos = r.Origin + r.Dir * t + (VolumeGridSize * 0.5);
            CurrentStepSize = (abs(prevDensity - Isovalue) < StepSizeRange) ? StepSizeSmall : StepSizeLarge;
            prevDensity = texture(TexVolume, prevTexPos / VolumeGridSize).r;
            float h = min(CurrentStepSize, tfar - t);
            t +=h;
            vec3 texPos = r.Origin + r.Dir * t + (VolumeGridSize * 0.5);
            density = texture(TexVolume, texPos / VolumeGridSize).r;
            */
            // First hit: isosurface
            /*
            if ( (prevDensity <= Isovalue && Isovalue < density)
            || (prevDensity >= Isovalue && Isovalue > density) )
            {
                //refine position
                float tt = (density - Isovalue) / (density - prevDensity);
                t-=tt;
                vec3 s_tex_pos = r.Origin + r.Dir * t + (VolumeGridSize * 0.5);
                
                // Get color
                vec4 src = Color;

                // Apply gradient, if enabled
                if (ApplyGradientPhongShading == 1)
                {
                    src.rgb = ShadeBlinnPhong(s_tex_pos, src.rgb);
                }

                // Front-to-back composition
                src.rgb = src.rgb * src.a;
                dst = dst + (1.0 - dst.a) * src;
                
                // Opacity threshold: 99%
                if (dst.a > 0.99) break;

            }
        */
        }  


/*
      // Distance to be evaluated
      float D = abs(tfar - tnear);

      // Initialize Transparency and Radiance color
      vec4 dst = vec4(0.0);

      // World position at tnear, translated to the volume [0, VolumeGridSize]
      vec3 wld_pos = r.Origin + r.Dir * tnear;
      // Texture position
      vec3 tex_pos = wld_pos + (VolumeGridSize * 0.5);
      
      // Evaluate from 0 to D...
      float prevDensity = texture(TexVolume, tex_pos / VolumeGridSize).r;
      for (float s = 0.0; s < D;)
      {
        float CurrentStepSize = (abs(prevDensity - Isovalue) < StepSizeRange) ? StepSizeSmall : StepSizeLarge;

        // Get the current step or the remaining interval
        float h = min(CurrentStepSize, D - s);
      
        // Texture position at tnear + (s + h)
        vec3 s_tex_pos = tex_pos  + r.Dir * (s + h);
      
        // Get normalized density from volume
        float density = texture(TexVolume, s_tex_pos / VolumeGridSize).r;

        // First hit: isosurface
        if ( (prevDensity <= Isovalue && Isovalue < density)
          || (prevDensity >= Isovalue && Isovalue > density) )
        {
          //refine position
          float t = (Isovalue - prevDensity) / (density - prevDensity);
          s_tex_pos = tex_pos  + r.Dir * (s + t * h);
          
          // Get color
          vec4 src = Color;

          // Apply gradient, if enabled
          if (ApplyGradientPhongShading == 1)
          {
            src.rgb = ShadeBlinnPhong(s_tex_pos, src.rgb);
          }

          // Front-to-back composition
          src.rgb = src.rgb * src.a;
          dst = dst + (1.0 - dst.a) * src;
          
          // Opacity threshold: 99%
          if (dst.a > 0.99) break;
        }

        // Go to the next interval
        prevDensity = density;
        s = s + h;
      }
      */

      imageStore(OutputFrag, storePos, dst);
    }
  }
}