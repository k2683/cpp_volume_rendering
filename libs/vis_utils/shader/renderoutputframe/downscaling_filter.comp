#version 430

layout (binding = 1) uniform sampler2D TexGeneratedFrame; 

uniform int TexGeneratedWidth;
uniform int TexGeneratedHeight;

uniform int TargetWidth;
uniform int TargetHeight;

layout (local_size_x = 8, local_size_y = 8, local_size_z = 1) in;
layout (rgba16f, binding = 0) uniform image2D OutputFrag;

float kernel_support ();
float kernel_weight (float x);

void main ()
{
  ivec2 storePos = ivec2(gl_GlobalInvocationID.xy);
  
  ivec2 size = imageSize(OutputFrag);
  if (storePos.x < size.x && storePos.y < size.y)
  {
    float s_r = float(TargetHeight) / TexGeneratedHeight;
    float s_c = float(TargetWidth) / TexGeneratedWidth;

    const int n_r = int(TexGeneratedHeight);
    const int n_c = int(TexGeneratedWidth);

    const float kr = 0.5 * float(kernel_support());
    
    int j_r = storePos.y;
    int j_c = storePos.x;

    float x_r = (j_r + 0.5) / TargetHeight;
    int il_r = int( ceil((x_r - kr / TargetHeight) * n_r - 0.5));
    int ir_r = int(floor((x_r + kr / TargetHeight) * n_r - 0.5));

    float x_c = (j_c + 0.5) / TargetWidth;
    int il_c = int( ceil((x_c - kr / TargetWidth) * n_c - 0.5));
    int ir_c = int(floor((x_c + kr / TargetWidth) * n_c - 0.5));

    vec4 f_color = vec4(0.0);
    for (int i_r = il_r; i_r <= ir_r; i_r++) {
      for (int i_c = il_c; i_c <= ir_c; i_c++) {
        f_color += (
          kernel_weight((x_r - (i_r + 0.5) / n_r) * TargetHeight) 
          *
          kernel_weight((x_c - (i_c + 0.5) / n_c) * TargetWidth)
        ) * texelFetch(TexGeneratedFrame, ivec2(i_c, i_r), 0);
      }
    }
    f_color *= (s_r * s_c);

    //k.digital_filter2D(g); // Apply kernel's associated digital filter
    imageStore(OutputFrag, storePos, f_color);
  }
}
